
<h3 id='h3_2012_0412'>2012-04-12 Debugging Node.js During Development</h3>
When I develop Ruby scripts or Rails sites I'm dependent on a good debugger.
When I'm working on a feature in an application my flow goes something like this:
<ul class='ul_type_disc'>
  <li>Write some test code</li>
  <li>Write some application-code to push the test code towards a green state</li>
  <li>Drop a debugger-call in the application-code where I want to inspect its state</li>
  <li>Drop a debugger-call in the test-code where I want to inspect its state</li>
  <li>Interact with the code</li>
  <li>Enhance the code</li>
  <li>Repeat</li>
</ul>
This style of coding makes me very dependent on the debugger and its features.
When I started writing Node.js software, I wanted to use a similar style of coding.
I looked for evidence of a debugger from the Node.js command line arguments:

<pre>
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ which node
/dan/nodejs/bin/node
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ node --help
Usage: node [options] [ -e script | script.js ] [arguments] 
       node debug script.js [arguments] 

Options:
  -v, --version        print node's version
  -e, --eval script    evaluate script
  -p, --print          print result of --eval
  --v8-options         print v8 command line options
  --vars               print various compiled-in variables
  --max-stack-size=val set max v8 stack size (bytes)

Environment variables:
NODE_PATH              ':'-separated list of directories
                       prefixed to the module search path.
NODE_MODULE_CONTEXTS   Set to 1 to load modules in their own
                       global contexts.
NODE_DISABLE_COLORS    Set to 1 to disable colors in the REPL

Documentation can be found at http://nodejs.org/
oracle@z3:/dan$ 
oracle@z3:/dan$ </pre>

<br>
I noticed the 'debug' token in the Usage message; that looked promising.
I wrote some simple JavaScript syntax into a file called debugthis.js:

<pre>
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ cat debugthis.js 
(function() {
  var cubes, list, math, num, number, opposite, race, square;
  var __slice = Array.prototype.slice;
  number = 42;
  opposite = true;
  if (opposite) {
    number = -42;
  }
  square = function(x) {
    return x * x;
  };
  list = [1, 2, 3, 4, 5];
  math = {
    root: Math.sqrt,
    square: square,
    cube: function(x) {
      return x * square(x);
    }
  };
  race = function() {
    var runners, winner;
    winner = arguments[0], runners = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return print(winner, runners);
  };
  if (typeof elvis !== "undefined" && elvis !== null) {
    alert("I knew it!");
  }
  cubes = (function() {
    var _i, _len, _results;
    _results = [];
    for (_i = 0, _len = list.length; _i < _len; _i++) {
      num = list[_i];
      _results.push(math.cube(num));
    }
    return _results;
  })();
}).call(this);
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ </pre>

I tried using the debug token as suggested by the command line help:

<pre>
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ node debug debugthis.js
&lt; debugger listening on port 5858
connecting... ok
break in debugthis.js:37
 35     return _results;
 36   })();
 37 }).call(this);
 38 
 39 });
debug> quit
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ node debug debugthis.js
&lt; debugger listening on port 5858
connecting... ok
debug> help
Commands: run (r), cont (c), next (n), step (s), out (o), backtrace (bt), setBreakpoint (sb), clearBreakpoint (cb),
watch, unwatch, watchers, repl, restart, kill, list, scripts, breakpoints, version
debug> list
[Function]
debug> s
break in debugthis.js:2
  1 (function() {
  2   var cubes, list, math, num, number, opposite, race, square;
  3   var __slice = Array.prototype.slice;
  4   number = 42;
debug> n
break in debugthis.js:3
  1 (function() {
  2   var cubes, list, math, num, number, opposite, race, square;
  3   var __slice = Array.prototype.slice;
  4   number = 42;
  5   opposite = true;
debug> n
break in debugthis.js:4
  2   var cubes, list, math, num, number, opposite, race, square;
  3   var __slice = Array.prototype.slice;
  4   number = 42;
  5   opposite = true;
  6   if (opposite) {
debug> n
break in debugthis.js:5
  3   var __slice = Array.prototype.slice;
  4   number = 42;
  5   opposite = true;
  6   if (opposite) {
  7     number = -42;
debug> number
ReferenceError: number is not defined
    at repl:1:2
    at Interface.controlEval (_debugger.js:930:21)
    at REPLServer.eval (native)
    at Interface.&lt;anonymous> (repl.js:182:12)
    at Interface.emit (events.js:67:17)
    at Interface._onLine (readline.js:162:10)
    at Interface._line (readline.js:426:8)
    at Interface._ttyWrite (readline.js:603:14)
    at ReadStream.&lt;anonymous> (readline.js:82:12)
    at ReadStream.emit (events.js:88:20)
debug> watch number
... 
... </pre>

<p>
  It dawned on me that this debugger behaved differently than the Ruby debugger which I was acquainted with.
  So, I asked my friend Adam at the BayNode Meetup what he used to debug Node.js software.
  He suggested I use a module named 'Node Inspector'.
  I googled it and then went to a github page:
</p>
<a href='http://github.com/dannycoates/node-inspector' target='u'>http://github.com/dannycoates/node-inspector</a>
<br>
<br>
There, I learned I could install Node Inspector with a package manager for Node.js called "npm".
So, I installed Node-Inspector with the npm shell command:

<pre>
oracle@z3:/dan$ 
oracle@z3:/dan$ npm --help

Usage: npm &lt;command>

where &lt;command> is one of:
    add-user, adduser, apihelp, author, bin, bugs, c, cache,
    completion, config, deprecate, docs, edit, explore, faq,
    find, get, help, help-search, home, i, info, init, install,
    la, link, list, ll, ln, login, ls, outdated, owner, pack,
    prefix, prune, publish, r, rb, rebuild, remove, restart, rm,
    root, run-script, s, se, search, set, show, shrinkwrap,
    star, start, stop, submodule, tag, test, un, uninstall,
    unlink, unpublish, unstar, up, update, version, view,
    whoami

npm &lt;cmd> -h     quick help on &lt;cmd>
npm -l           display full usage info
npm faq          commonly asked questions
npm help &lt;term>  search for help on &lt;term>
npm help npm     involved overview

Specify configs in the ini-formatted file:
    /home/oracle/.npmrc
or on the command line via: npm &lt;command> --key value
Config info can be viewed via: npm help config

npm@1.1.16 /dan/nodejs/lib/node_modules/npm
oracle@z3:/dan$ npm list
/dan
â””â”€â”€ (empty)
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ 



oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ npm install -g node-inspector
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/node-inspector
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/node-inspector
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/paperboy
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/socket.io
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/paperboy
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/socket.io
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/socket.io-client/0.8.7
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/redis/0.6.7
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/policyfile/0.0.4
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/redis/0.6.7
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/socket.io-client/0.8.7
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/policyfile/0.0.4
[37;40mnpm[0m [30;41mWARN[0m [35mexcluding symbolic link[0m lib/socket.io-client.js -> io.js
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/uglify-js/1.0.6
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/websocket-client/1.0.0
[37;40mnpm[0m [32;40mhttp[0m [35mGET[0m https://registry.npmjs.org/xmlhttprequest/1.2.2
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/websocket-client/1.0.0
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/xmlhttprequest/1.2.2
[37;40mnpm[0m [32;40mhttp[0m 304 https://registry.npmjs.org/uglify-js/1.0.6
/dan/nodejs/bin/node-inspector -> /dan/nodejs/lib/node_modules/node-inspector/bin/inspector.js
paperboy@0.0.3 /dan/nodejs/lib/node_modules/node-inspector/node_modules/paperboy

policyfile@0.0.4 /dan/nodejs/lib/node_modules/node-inspector/node_modules/socket.io/node_modules/policyfile

redis@0.6.7 /dan/nodejs/lib/node_modules/node-inspector/node_modules/socket.io/node_modules/redis

xmlhttprequest@1.2.2 /dan/nodejs/lib/node_modules/node-inspector/node_modules/socket.io/node_modules/ snip...

websocket-client@1.0.0 /dan/nodejs/lib/node_modules/node-inspector/node_modules/socket.io/node_modules/ snip...

uglify-js@1.0.6 /dan/nodejs/lib/node_modules/node-inspector/node_modules/socket.io/node_modules/ snip...

socket.io-client@0.8.7 /dan/nodejs/lib/node_modules/node-inspector/node_modules/socket.io/node_modules/ snip...

socket.io@0.8.7 /dan/nodejs/lib/node_modules/node-inspector/node_modules/socket.io

node-inspector@0.1.10 /dan/nodejs/lib/node_modules/node-inspector
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ 


oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ npm list
/dan
â””â”€â”€ (empty)

oracle@z3:/dan$ 
oracle@z3:/dan$ which node-inspector
/dan/nodejs/bin/node-inspector
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ </pre>

<br>
<br>
Some of the output looked garbled because npm could not detect that I was calling it from an Emacs shell.
It assumed I was in a normal terminal window and it wanted to colorize some of the output.
Aside from that, I was happy because I had just installed Node Inspector with npm.
How do I "run" Node Inspector?
The github page suggested I run it like this:

<pre>
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ node-inspector &
[1] 32700
oracle@z3:/dan$    [36minfo  -[39m socket.io started
visit http://0.0.0.0:8080/debug?port=5858 to start debugging

oracle@z3:/dan$ 
oracle@z3:/dan$ </pre>

<br>
<br>
The impression I got from searching the web is that Node Inspector is something I should have running in the background on my laptop most of the time.
Then it will be ready for action when I need it.
This is similar to how I think a database or webserver should behave.
<br>
<br>

After starting Node Inspector, the github page suggested I run my node-script with a command line option: --debug-brk
<br>
<br>

So, I did that:

<pre>
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ node --debug-brk debugthis.js 
debugger listening on port 5858</pre>

<br>
<br>
And that shell became locked.
<br>
The github page suggested I point my Chrome browser at this URL:</p>
http://127.0.0.1:8080/debug?port=5858
<br>
<br>
<p>This looked familiar because the Node Inspector prompt had told me to do this:</p>

<pre>
visit http://0.0.0.0:8080/debug?port=5858 to start debugging</pre>


<br>
<p>So, I loaded the second URL into a Chrome browser and saw this:</p>
<img src='/assets/chrome_8080_1.png'>
<br>
<br>
<p>Obviously, that was not very useful.  I had done something wrong.  I then noticed this message in the window running Node Inspector:</p>

<pre>
oracle@z3:/dan$ 
oracle@z3:/dan$ 
oracle@z3:/dan$ debugger not connected
debugger not connected
debugger not connected
debugger not connected
debugger not connected</pre>

<br>
<p>
  So, I killed Node Inspector and then I killed the debugger.
  Then, I started them in different order; the debugger first, Node Inspector second.
  I loaded the URL into Chrome again and saw this:
</p>
<img src='/assets/chrome_8080_2.png'>
<p>
  I felt good when I saw the above UI in Chrome.
  I was familiar with it.
  It is identical to the UI I use to debug JavaScript served to a browser from a normal webserver.
  I checked that I could use it to step through code and interact with objects and variables.
  It worked great; I was happy because I was at the point where I was with Ruby and Rails.
  I could attach a debugger to both application software and testing software.
</p>
