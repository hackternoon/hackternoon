
<h3 id='h3_2012_0329'>2012-03-29 Notes about Heroku 'pgbackups'</h3>

I looked for information on backup/restore of pg data on Heroku.

<br />
<br />
I started by simple interaction with the Heroku gem:
<br />

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku 
Usage: heroku COMMAND [--app APP] [command-specific-options]

Primary help topics, type "heroku help TOPIC" for more details:

  addons    # manage addon resources
  apps      # manage apps (create, destroy)
  auth      # authentication (login, logout)
  config    # manage app config vars
  domains   # manage custom domains
  logs      # display logs for an app
  ps        # manage processes (dynos, workers)
  releases  # view release history of an app
  run       # run one-off commands (console, rake)
  sharing   # manage collaborators on an app

Additional topics:

  account      # manage heroku account options
  db           # manage the database for an app
  drains       # display syslog drains for an app
  help         # list commands and display help
  keys         # manage authentication keys
  maintenance  # toggle maintenance mode
  pg           # manage heroku postgresql databases
  pgbackups    # manage backups of heroku postgresql databases
  plugins      # manage plugins to the heroku gem
  ssl          # manage ssl certificates for an app
  stack        # manage the stack for an app
  status       # check status of Heroku platform
  update       # update the heroku client
  version      # display version

oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku help pg
Additional commands, type "heroku help COMMAND" for more details:

  pg:credentials [DATABASE]  # Display the DATABASE credentials.
  pg:info [DATABASE]         # Display database information
  pg:promote [DATABASE]      # Sets DATABASE as your DATABASE_URL
  pg:psql [DATABASE]         # Open a psql shell to the database
  pg:reset [DATABASE]        # Delete all data in DATABASE
  pg:unfollow &lt;REPLICA>      # stop a replica from following and make it a read/write database 
  pg:wait [DATABASE]         # monitor database creation, exit when complete

</pre>

I was curious about the configuration of my Postgres db on Heroku.
<br />
<br />
So I looked:

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku config
DATABASE_URL        => postgres://hgfrrmiw23:YLQXU6GCSPmDBPnpVYL4@ec2-107-20-155-141.compute-1.amazonaws.com/hgfrrmiw23
GEM_PATH            => vendor/bundle/ruby/1.9.1
LANG                => en_US.UTF-8
PATH                => bin:vendor/bundle/ruby/1.9.1/bin:/usr/local/bin:/usr/bin:/bin
RACK_ENV            => production
RAILS_ENV           => production
SHARED_DATABASE_URL => postgres://hgfrrmiw23:YLQXU6GCSPmDBPnpVYL4@ec2-107-20-155-141.compute-1.amazonaws.com/hgfrrmiw23




oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku pg:info
=== SHARED_DATABASE (DATABASE_URL)
Data Size    160k
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku pg:credentials
 !    Cannot ingress to a shared database
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 

</pre>

Next, I looked for information about how pgbackups work:

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku help pgbackups
Usage: heroku pgbackups

 list captured backups

Additional commands, type "heroku help COMMAND" for more details:

  pgbackups:capture [DATABASE]                           # capture a backup from a database id
  pgbackups:destroy BACKUP_ID                            # destroys a backup
  pgbackups:restore [&lt;DATABASE> [BACKUP_ID|BACKUP_URL]]  # restore a backup to a database
  pgbackups:url [BACKUP_ID]                              # get a temporary URL for a backup

oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 




oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku help pgbackups:capture
Usage: heroku pgbackups:capture [DATABASE]

 capture a backup from a database id

 if no DATABASE is specified, defaults to DATABASE_URL

 -e, --expire  # if no slots are available to capture, destroy the oldest backup to make room

oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 




oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku help pgbackups:url
Usage: heroku pgbackups:url [BACKUP_ID]

 get a temporary URL for a backup

oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
</pre>


Next, I created two Postgres databases on my localhost straight from the bash command line:

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ createdb db1
oracle@z3:/pt/w/hn/z3_2012_0329$ createdb db2
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
</pre>

I put a table in the first db:

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ psql db1
psql (8.4.10)
Type "help" for help.

db1=#
db1=#
db1=# create table mytable (n int) ;
CREATE TABLE
db1=# insert into mytable values(10);
INSERT 0 1
db1=#
db1=#


db1=# \q
oracle@z3:/pt/w/hn/z3_2012_0329$ psql db1
psql (8.4.10)
Type "help" for help.

db1=# select * from mytable;
 n  
----
 10
(1 row)

db1=# 
db1=# 
</pre>

I tried using the heroku gem to back it up:

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku pgbackups:capture postgres://localhost/db1
 !    Please add the pgbackups addon first via:
 !    heroku addons:add pgbackups
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 



oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku addons:add pgbackups
----> Adding pgbackups to hackternoon... done, v29 (free)
      You can now use "pgbackups" to backup your databases or import an external backup.
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 



oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku pgbackups:capture postgres://localhost/db1

Database on localhost  ----backup--->  b001

[0KPending...  -
 !    An error occurred and your backup did not finish.
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
</pre>


Maybe I can only use the heroku gem to backup Postgres databases which are hosted by heroku.

<br />
<br />
I looked for clues in Google:

<br />
<br />
google:
<br />
  pgbackups site:heroku.com

<br />
<br />
Result:
<br />
<br />
  Heroku PG Backups | Heroku Dev Center
  devcenter.heroku.com/articles/pgbackups
  Mar 13, 2012 â€“ The Heroku PGBackups add-on lets you easily capture and manage backups for your shared and dedicated Heroku PostgreSQL databases.

<br />
<br />
I tried this:

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ heroku pgbackups:capture

SHARED_DATABASE (DATABASE_URL)  ----backup--->  b002

Capturing... done
Storing... done

oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
</pre>

I tried this:

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku pgbackups
ID   | Backup Time         | Size   | Database       
-----+---------------------+--------+----------------
b002 | 2012/03/29 15:46.37 | 10.9KB | SHARED_DATABASE
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
</pre>

I tried this:

<pre>
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ bin/heroku pgbackups:url b002
"https://s3.amazonaws.com/hkpgbackups/app3351536@heroku.com/b002.dump?AWSAccessKeyId=snip..."
oracle@z3:/pt/w/hn/z3_2012_0329$ 
oracle@z3:/pt/w/hn/z3_2012_0329$ 
</pre>


I tried this:

<pre>
oracle@z3:/tmp$ wget https://s3.amazonaws.com/hkpgbackups/app3351536@heroku.com/b002.dump?AWSAccessKeyId=snip...
[1] 2088
[2] 2089
--2012-03-29 23:50:54--  https://s3.amazonaws.com/hkpgbackups/app3351536@heroku.com/b002.dump?AWSAccessKeyId=snip..
Resolving s3.amazonaws.com... 207.171.185.200
Connecting to s3.amazonaws.com|207.171.185.200|:443... connected.
HTTP request sent, awaiting response... 403 Forbidden
2012-03-29 23:50:55 ERROR 403: Forbidden.


[2]+  Done                    Expires=1333061930
[1]-  Exit 8                  wget https://s3.amazonaws.com/hkpgbackups/app3351536@heroku.com/b002.dump?AWSAccessKeyId=snip..
[2]+  Done                    Expires=1333061930
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>


Oops, I let my shell see some characters in the command line I fed to wget.


<br />
<br />
I tried this:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ wget 'https://s3.amazonaws.com/hkpgbackups/app3351536@heroku.com/b002.dump?AWSAccessKeyId=snip..
--2012-03-29 23:53:12--  https://s3.amazonaws.com/hkpgbackups/app3351536@heroku.com/b002.dump?AWSAccessKeyId=snip..
Resolving s3.amazonaws.com... 72.21.211.199
Connecting to s3.amazonaws.com|72.21.211.199|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 11185 (11K) [binary/octet-stream]
Saving to: `b002.dump'

100%[======================================>] 11,185      --.-K/s   in 0.01s   

2012-03-29 23:53:13 (807 KB/s) - `b002.dump' saved [11185/11185]
</pre>


How big is the backup?

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ ll b002.dump 
-rw-r--r-- 1 oracle oracle 11185 2012-03-29 23:46 b002.dump
oracle@z3:/tmp$ 
</pre>


<br />
<br />
That is small.

<br />
<br />
I asked bash what it thinks the backup file is:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ file b002.dump
b002.dump: PostgreSQL custom database dump - v1.10-0
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>

I used emacs to look at the file.
<br />
<br />
I saw that it is not a text file.

<br />
<br />
I used the strings utility to look inside the binary PostgreSQL dump file:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ strings b002.dump|head -9
PGDMP
hgfrrmiw23
8.3.11
8.3.14
ENCODING
ENCODING
SET client_encoding = 'UTF8';
false
STDSTRINGS
oracle@z3:/tmp$ 
oracle@z3:/tmp$ strings b002.dump | tail -9
><5ZN
0sU4
p~__
:9#/
T0EJ
\*3M
|>.@a
bol/Z0
et:8
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ strings b002.dump | wc -l
368
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>


I looked for clues in Google on how to interact with this file.

<br />
<br />
I wanted to know:
<ul>
  <li />- How do I list its contents?
  <li />- How do I restore tables and indexes which reside in the file?
  <li />- What do I need to know about security?
  <li />- Is ownership information resident within the file?
</ul>


<br />
Some clues I got from Google:
<ul>
 <li /> - postgresql dump files
 <li /> - pg_dump
 <li /> - pg_restore 
 <li /> - pg_restore --file
 <li /> - pg_restore --list
 <li /> - pg_restore --no-owner
</ul>


<br />
I tried this:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ which pg_restore
/usr/bin/pg_restore
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>


I tried this:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ pg_restore --list b002.dump 
;
; Archive created at Thu Mar 29 15:46:38 2012
;     dbname: hgfrrmiw23
;     TOC Entries: 32
;     Compression: -1
;     Dump Version: 1.10-0
;     Format: CUSTOM
;     Integer: 4 bytes
;     Offset: 8 bytes
;     Dumped from database version: 8.3.11
;     Dumped by pg_dump version: 8.3.14
;
;
; Selected TOC Entries:
;
3; 2615 2200 SCHEMA - public postgres
1769; 0 0 COMMENT - SCHEMA public postgres
1475; 1259 1136552 TABLE public invitations hgfrrmiw23
1474; 1259 1136550 SEQUENCE public invitations_id_seq hgfrrmiw23
1770; 0 0 SEQUENCE OWNED BY public invitations_id_seq hgfrrmiw23
1771; 0 0 SEQUENCE SET public invitations_id_seq hgfrrmiw23
1477; 1259 1136560 TABLE public projects hgfrrmiw23
1476; 1259 1136558 SEQUENCE public projects_id_seq hgfrrmiw23
1772; 0 0 SEQUENCE OWNED BY public projects_id_seq hgfrrmiw23
1773; 0 0 SEQUENCE SET public projects_id_seq hgfrrmiw23
1473; 1259 1136546 TABLE public schema_migrations hgfrrmiw23
1479; 1259 1136571 TABLE public users hgfrrmiw23
1478; 1259 1136569 SEQUENCE public users_id_seq hgfrrmiw23
1774; 0 0 SEQUENCE OWNED BY public users_id_seq hgfrrmiw23
1775; 0 0 SEQUENCE SET public users_id_seq hgfrrmiw23
1746; 2604 1136555 DEFAULT public id hgfrrmiw23
1747; 2604 1136563 DEFAULT public id hgfrrmiw23
1748; 2604 1136574 DEFAULT public id hgfrrmiw23
1763; 0 1136552 TABLE DATA public invitations hgfrrmiw23
1764; 0 1136560 TABLE DATA public projects hgfrrmiw23
1762; 0 1136546 TABLE DATA public schema_migrations hgfrrmiw23
1765; 0 1136571 TABLE DATA public users hgfrrmiw23
1754; 2606 1136557 CONSTRAINT public invitations_pkey hgfrrmiw23
1756; 2606 1136568 CONSTRAINT public projects_pkey hgfrrmiw23
1761; 2606 1136582 CONSTRAINT public users_pkey hgfrrmiw23
1757; 1259 1136583 INDEX public index_users_on_confirmation_token hgfrrmiw23
1758; 1259 1136584 INDEX public index_users_on_email hgfrrmiw23
1759; 1259 1136585 INDEX public index_users_on_reset_password_token hgfrrmiw23
1752; 1259 1136549 INDEX public unique_schema_migrations hgfrrmiw23
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>


I wanted to transform the dump file into a file full of SQL syntax.
<br />
<br />
I tried this:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ pg_restore --no-owner --file=b002.dump.txt b002.dump
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>

I looked for the output file:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ ll b002.dump.txt 
-rw-r--r-- 1 oracle oracle 10087 2012-03-30 02:27 b002.dump.txt
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>


I looked to see if it contained SQL statements:

<pre>

oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ head -9 b002.dump.txt
--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ tail -9 b002.dump.txt
--

CREATE UNIQUE INDEX unique_schema_migrations ON schema_migrations USING btree (version);


--
-- PostgreSQL database dump complete
--

oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ grep -i create b002.dump.txt|grep -i table
CREATE TABLE invitations (
CREATE TABLE projects (
CREATE TABLE schema_migrations (
CREATE TABLE users (
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>


It contained no INSERT statements:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ grep -i insert b002.dump.txt
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>

But it did contain COPY statements:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ grep -i copy b002.dump.txt
COPY invitations (id, msg, project_id, sender_id, user_id, created_at, updated_at) FROM stdin;
COPY projects (id, name, dscrptn, user_id, github_url, tech_tag1, tech_tag2, tech_tag3, biz_tag1, biz_tag2 snip...
COPY schema_migrations (version) FROM stdin;
COPY users (id, email, encrypted_password, reset_password_token, reset_password_sent_at, remember_created_at, snip...
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
</pre>


I tried to restore it into a blank database named db1:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ pg_restore --schema-only --no-owner --dbname=db1 b002.dump
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 


oracle@z3:/tmp$ psql db1
psql (8.4.10)
Type "help" for help.

db1=#
db1=# \d projects

                                     Table "public.projects"
   Column   |            Type             |                       Modifiers                       
------------+-----------------------------+-------------------------------------------------------
 id         | integer                     | not null default nextval('projects_id_seq'::regclass)
 name       | character varying(255)      | 
 dscrptn    | text                        | 
 user_id    | integer                     | 
 github_url | character varying(255)      | 
 tech_tag1  | character varying(255)      | 
 tech_tag2  | character varying(255)      | 
 tech_tag3  | character varying(255)      | 
 biz_tag1   | character varying(255)      | 
 biz_tag2   | character varying(255)      | 
 biz_tag3   | character varying(255)      | 
 created_at | timestamp without time zone | not null
 updated_at | timestamp without time zone | not null
Indexes:
    "projects_pkey" PRIMARY KEY, btree (id)


db1=# 
db1=# 
</pre>

I tried to restore it into a blank database named db2 on my localhost:

<pre>
oracle@z3:/tmp$ 
oracle@z3:/tmp$ pg_restore --no-owner --dbname=db2 b002.dump
oracle@z3:/tmp$ 
oracle@z3:/tmp$ 
oracle@z3:/tmp$ psql db2
psql (8.4.10)
Type "help" for help.

db2=# select count(*) from projects;
 count 
-------
     2
(1 row)

db2=# 
db2=# 
</pre>

<br />
It worked.  Yay!

<br />
<br />
