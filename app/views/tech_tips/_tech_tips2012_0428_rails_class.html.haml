- ulns = [10,11,12,13,14,15]
- ulns.each do |uln|
  :javascript
    $(document).ready(function() {
      $("ul#ul_#{uln}").hide("slow");
      $("a#hide_ul_#{uln}").hide("slow");
      $("a#show_ul_#{uln}").show("slow");
      $("a#show_ul_#{uln}").click(function(event) {
        event.preventDefault();
        $("a#show_ul_#{uln}").hide("slow");
        $("a#hide_ul_#{uln}").show("slow");
        $("ul#ul_#{uln}").show("slow");
      });
      $("a#hide_ul_#{uln}").click(function(event) {
        event.preventDefault();
        $("a#hide_ul_#{uln}").hide("slow");
        $("ul#ul_#{uln}").hide("slow");
        $("a#show_ul_#{uln}").show("slow");
      });
    });

%h3#h3_2012_0428 2012-04-28 Rails Class Topics
%p
  I've taught Rails to a wide variety of people since 2006.
  This post is a mixture of a blog-post and a tech-tip.
  It's a bit more technical than opinionated so I placed this post in the "Tech Tips" section of this site.

%p
  When I teach Rails I prefer to explore the list of topics below:
.bash_class
  %ul
    %li 
      %a#show_ul_10.hidden(href="#") Opinionated Initial Topics
      %a#hide_ul_10(href="#") Opinionated Initial Topics:
      %ul#ul_10
        %li Windows is bad; Mac is pretty good but Ubuntu Linux is excellent
        %li Installation of Ruby
        %li You don't need to use RVM but you should know how to use it
        %li RVM alternatives
        %li Optional: Installation of JRuby
        %li Installation of RubyGems
        %li Interacting with "System Gems"
        %li Install Bundler
        %li Interact with Bundler
        %li Git: You don't need to use Git but it is useful
        %li Use RubyGems to install Rails
        %li Database choices: SQLite best for learning else MySQL or Postgres
        %li Use Rails to create a new application
    %li
      %a#show_ul_11.hidden(href="#") Shell commands related to Rails
      %a#hide_ul_11(href="#") Shell commands related to Rails:
      %ul#ul_11
        %li rails
        %li rake
        %li gem
        %li bundle
    %li Opinion: Use "Inside/Out" thinking to learn Rails
    %li Opinion: Use "Outside/In" thinking to practice Rails
    %li bin/rake db:create, creates a "database"
    %li bin/rails generate migration, create a database table script
    %li bin/rake: db:migrate, creates a database table, users for example, from the script
    %li bin/rails generate model, creates software to talk with database
    %li
      %a#show_ul_12.hidden(href="#")
        bin/rails console, use this to learn Active Record API
      %a#hide_ul_12(href="#")
        bin/rails console, use this to learn Active Record API:
      %ul#ul_12
        %li AR-class-methods interact with DB
        %li Ex: @user = User.find_by_name 'dan@hackternoon.com'
        %li Google: Rails Active Record Arel
        %li Google: Rails Active Record Named Scope
        %li AR-object getters/setters match table columns
        %li Ex: @user.email
        %li Use attr_accessible to create whitelist of attributes
        %li Validations: Prevent bad data
        %li Callbacks: before_create, after_create, before_save, after_save
        %li Associations: CREATE TABLE projects(name,..., user_id) 
        %li belongs_to association, project belongs_to :user
        %li Ex: @project.user.email
        %li has_many association, user has_many :projects
        %li Ex: @user.projects.first.description
    %li
      %a#show_ul_13.hidden(href="#")
        bin/rails generate controller users index
      %a#hide_ul_13(href="#")
        bin/rails generate controller users index:
      %ul#ul_13
        %li bin/rake routes
        %li bin/rails server
        %li
          Use ruby_debug19 to see interesting objects in the controller:
          %ul
            %li request
            %li params
            %li session
            %li @user AR-object
        %li render
        %li redirect_to
        %li double render exception
    %li 
      %a#show_ul_14.hidden(href="#")
        app/views
      %a#hide_ul_14(href="#")
        app/views:
      %ul#ul_14
        %li Views are usually written in ERB (similar to PHP)
        %li Other languages besides ERB: HAML and Slim
        %li HAML is better than ERB for learning about app/views
        %li Slim claims to be more performant
        %li Controller instance variables are available in views
        %li View hierarchy: Layout - Template - Partial - Partial - Partial,...
        %li Naming convention: Layout named after controller
        %li Naming convention: Template named after method in controller
        %li Example File System Naming convention: app/views/layouts/
        %li Example File System Naming convention: app/views/users/
        %li Example File System Naming convention: app/views/projects/
        %li My File System Naming convention for shared partials: app/views/shared/
        %li
          Tag Helpers (many of them!) my top 4:
          %ul
            %li link_to
            %li image_tag
            %li form_for
            %li form_tag
        %li
          Techniques for sharing code between views:
          %ul
            %li Use application-wide layout when possible: app/views/layouts/application.html.haml
            %li In controller, instead of default render, specify render
            %li Use a "shared" directory to hold some partials: app/views/shared/
            %li app/helpers/application_helper.rb holds logic/syntax which can be shared
        %li
          Use ruby_debug19 to see interesting objects in the view:
          %ul
            %li params
            %li notice
            %li alert
            %li controller instance variables
        %li
          Assets:
          %ul
            %li Images: dan.jpg
            %li CSS: dan.css
            %li JavaScript: dan.js
            %li Easy way: put assets under public/
            %li
              Performant way: put assets under app/assets:
              %ul
                %li Google: Rails Asset Pipeline
                %li Production needs assets precompiled
                %li Development does not
                %li bin/rake assets:clean:all 
                %li bin/rake assets:precompile:all 
                %li Coffee-Script now easy to use in Rails
                %li Sass now easy to use in Rails
    %li 
      %a#show_ul_15.hidden(href="#")
        Configuration Files
      %a#hide_ul_15(href="#")
        Configuration Files:
      %ul#ul_15
        %li config/database.yml
        %li config/routes.rb
        %li config/environments/development.rb
        %li config/environments/test.rb
        %li config/environments/production.rb


